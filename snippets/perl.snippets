### Setup
# shebang line - #!/usr/local/bin/perl
snippet #! shebang line
	#!/usr/local/bin/perl
# begin block
snippet begin begin block
	BEGIN {
		${0}
	}
# strict warnings
snippet strict use strict and warnings
	use strict;
	use warnings;
	${0}

### Flow Control
# if
snippet if if statement
	if ( ${1} ) {
		${0}
	}
# if..else
snippet ife if..else statement
	if ( ${1} ) {
		${2}
	}
	else {
		${0}
	}
# if..elsif..else
snippet ifee if..elsif..else statment
	if ( ${1} ) {
		${2}
	}
	elsif ( ${3} ) {
		${4:# elsif...}
	}
	else {
		${0}
	}
# elsif
snippet eif elsif statement
	elsif ( ${1} ) {
		${0}
	}
# else
snippet el else statement
	else {
		${0}
	}
# if one-liner
snippet xif if one-liner statement
	${1:expression} if ${2:condition};
# unless 
snippet unless unless statement
	unless ( ${1} ) {
		${0}
	}
# unless one-liner statement
snippet xunless Conditional unless one-liner statment
	${1:expression} unless ${2:condition};
# ternary operator
snippet ?: ternary operator
	${1:result} = ${2:condition} ? ${3:true-value} : ${4:false-value}

### Loops
# while Loop
snippet wh while loop
	while ( ${1} ) {
		${0}
	}
# while loop one-liner
snippet xwh while loop one-liner statement
	${1:expression} while ${2:condition};
# C-style For Loop
snippet cfor C-style for loop
	for ( my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++} ) {
		${0}
	}
# for loop one-liner
snippet xfor for loop one-liner
	${1:expression} for @${2:array};
# foreach Loop
snippet for
	for my $${1:x} ( @${2:array} ) {
		${0}
	}
# foreach key
snippet fork foreach key
	for my $${1:x} ( keys( %${2:array} ) ) {
		${0}
	}
# next if
snippet next next if
	next if ${1:condition};
# next unless
snippet nextu next if
	next unless ${1:condition};
# last if
snippet last last if
	last if ${1:condition};
# last unless
snippet lastu last unless
	last unless ${1:condition};

### Subroutines
# Vanilla subroutine
snippet sub subroutine
	sub ${1:function_name} {
		${0}
	}
# Subroutine with shift of first argument
snippet subs subroutine with shift of first argument
	sub ${1:function_name} {
		my $${2:self} = shift;
		${0}
	}
# Subroutine with unpacked arguments.
snippet suba subroutine with unpacked arguments
	sub ${1:function_name} {
		my ( $${2:args} ) = @_;
		${0}
	}
# Anonymous subroutine
snippet asub anonymous subroutine
	sub {
		${0}
	}

# Package
snippet package create package
	package ${1:`substitute(vim_snippets#Filename('', 'Page Title'), '^.', '\u&', '')`};

	${0}

	1;

	__END__
# Package syntax perl >= 5.14
snippet packagev514 create package for perl >= 5.14
	package ${1:`substitute(vim_snippets#Filename('', 'Page Title'), '^.', '\u&', '')`} ${2:0.99};

	${0}

	1;

	__END__
#moose
snippet moose new Moose class
	use Moose;
	use namespace::autoclean;
	${1:#}BEGIN {extends '${2:ParentClass}'};

	${0}
# parent
snippet parent parent class declaration
	use parent qw( ${0:Parent Class} );
# package keyword
snippet pkg
	__PACKAGE__
# call package function with some parameter
snippet pkgmv
	__PACKAGE__->${1:package_method}( ${2:var} )
# call package function without a parameter
snippet pkgm
	__PACKAGE__->${1:package_method}()

# call package "get_" function without a parameter
snippet pkget
	__PACKAGE__->get_${0:package_method}()

# call package function with a parameter
snippet pkgetv
	__PACKAGE__->get_${1:package_method}( ${0:var} )


### Regular Expressions
# basic regex
snippet / basic regex
	m/${1:regex}/
# complex regex
snippet m/ complex regex
	m/
	  ${1:regex}
	/xms
# substitution
snippet s/ substituion
	s/${1:regex}/${2:replacement}/
# compiled regex
snippet qr compiled regex
	qr/${1:regex}/

### Builtins
# map
snippet map map
	map( { ${1:body} } ${2:@array} )
# grep
snippet grep grep
	grep( { ${1:body} } ${2:@array} )
# join
snippet join join
	join( ${1:','}, ${2:@array} )
# split
snippet split split
	split( ${1:m/ /}, ${2:$text} )
# keys
snippet keys keys
	keys( %${1:hash} )
# values
snippet values values
	values( %${1:hash} )
# push
snippet push push
	push( $${1:item}, @${2:array} )
# pop
snippet pop pop
	pop( @${1:array} )
# shift
snippet shift shift
	shift( @${1:array} )
# unshift
snippet unshift unshift
	unshift( $${1:item}, @${2:array} )
# sort
snippet sort sort
	sort( { $${1:a} <=> $${2:b} } @${3:array} )
# chomp
snippet chomp chomp
	chomp( $${1:line} )
# bless
snippet bless bless
	bless( $${1:self}, $${2:class} )
# qw
snippet qw qw
	qw( ${1:words} )
# exists
snippet exists exists
	exists( $${1:variable} )
# defined
snippet defined defined
	defined( $${1:variable} )
# sprintf
snippet sprintf sprintf
	sprintf( "${1:format}", ${2:arguments} )
# croak
snippet croak croak
	croak "${1:message}" if ${2:condition};
	${0}
# ref
snippet ref ref
	ref( $${1:object} )
# scalar
snippet sc scalar
	scalar( @${1:array} )
# scalar keys
snippet sck scalar keys
	scalar( keys( %${1:hash} ) )

### Documentation
# main POD documentation for file
snippet pod main POD documentation for file
	=head1 NAME

	${1:ClassName} - ${2:ShortDesc}

	=head1 SYNOPSIS

	  use $1;

	  ${3:# synopsis...}

	=head1 DESCRIPTION

	${0:# longer description...}

	=head1 AUTHOR

	Created on `strftime("%A, %B %d, %Y")` by ${4:name}.

	=cut
# subroutine heading and description
snippet psub POD subroutine heading and description
	=over 4
	=head2 ${1:function_name}

	  ${2:examples}

	${0:description}

	=back 4
	=cut
# program section break
snippet ## program section break
	###################################### ${1:section_name} ##############################
	${0}

### Moose
# Moose has
snippet has
	has ${1:attribute} => (
		is	    => '${2:ro|rw}',
		isa 	=> '${3:Str|Int|HashRef|ArrayRef|etc}',
		default => sub {
			${4:defaultvalue}
		},
		${0:# other attributes}
	);
# override
snippet override
	override ${1:attribute} => sub {
		${2:# my $self = shift;};
		${0:# my ($self, $args) = @_;};
	};

### File System
# read file and process each line
snippet open read file and process each line
	open( my $${1:fh}, '<', $${2:file} ) or die "Could not open file $$2 - $!";
	while ( my $${3:line} = <$$1> ) {
	    ${0}
	}
	close( $$1 );
# read directory and process each file
snippet opendir read directory and process each file
	opendir( <$${1:dh}>, $${2:dir} ) or die "Could not open directory $$2 - $!";
	my @${3:files} = map( { /^\.\.?$/ ? () : $_ } readdir(  ) );
	for my $${4:file} ( @$3 ) {
	    ${0}
	}
	close( <$$1> );
# read entire File
snippet slurp read entire file
	my $${1:var} = do { local $/; open my $2, '<', "${2:file}"; <FILE> };
	${0}

### Date and time
# today's date
snippet today today's date
	my ( $day, $month, $year ) = ( localtime() )[3..5];
	my $today = sprintf( "%04d%02d%02d", $year + 1900, $month + 1, $day );
 
# current date and time
snippet now current date and time
	my( $sec, $min, $hour, $day, $month, $year ) = ( localtime() )[0..5];
	my $now = sprintf( "%04d%02d%02d%02d%02s%02s", $year + 1900, $month + 1, $day, $hour, $min, $sec );
# time an operation
snippet timer time an operation:u
	my $start = time();
	${0}
	my $elapsed = tiem() - $start;

### Testing
# set up unit test program
snippet tunit set up unit test program
	#!/usr/local/bin/perl

	### Unit test program for class ${1:class}.

	use strict;
	use warnings;
	use Test::More;

	use $1;

	my $${2:object} = $1->new;
	isa_ok( $2, $1, "constructor return value" );
	can_ok( $2, qw(
	  ${3:methods}
	);

	${0}

	done_testing;
# is test
snippet is is test
	is( $${1:actual}, ${2:expected}, "${3:description}" );
# is test
snippet isnt isnt test
	isnt( $${1:actualtest}, ${2:expected}, "${3:description}" );

### Debugging
# dump variable contents
snippet dump dump variable contents
	use Data::Dumper;
	warn Dumper( ${1:variable} )
# generate callstack
snippet callstack generate callstack
	my $level = 0;
	my @callers = ();
	while ( my ( $package, $filename, $line ) = caller( $level ) ) {
	  my $caller = join( '||', $package, $filename, $line );
	  push( @callers, $caller );
	  $level += 1;
	}
	my $stack = join( ' => ', @callers );
# mod_perl log message
snippet mpl mod_perl log message
	Apache->request->log->notice( "${1:message}" );
	${0}
### Command Line Arguments
# use Getopt::Long
snippet clu use Getopt::Long
	use Getopt::Long;
	${0}
# GetOptions
snippet cl GetOptions
	GetOptions(
	  '${1:argument}${2}' => \$args{'$1'},
	);

### Database
# use DBI::DatabaseSession;
snippet dbu use DBI::DatabaseSession
	use DBI::DatabaseSession;
	${0}
# create new DBI::DatabaseSession object;
snippet db new DBI::DatabaseSession object
	my $db = DBI::DatabaseSession->new();
	${0}
# execute SQL query
snippet dbr execute SQL query
	my $${1:sth} = $db->run( $${2:sql}, ${3:[]} );
	while ( my( ${4:values} ) = $$1->fetchrow ) {
	    ${0}
	}
	$$1->finish;

### Logging
# use Log::Writer
snippet logu use Log::Writer
	use Log::Writer;
	${0}
# create new Log::Writer
snippet log new Log::Writer
	my $log = Log::Writer->new( file => $${1:file} );
	${0}
# set up logging session
snippet logi set up logging session
	$log->init();

	${0}

	$log->cleanup();
# log debugging message
snippet ld log debugging message
	$log->debug( "${1:message}" );
	${0}
# log info message
snippet li log info message
	$log->info( "${1:message}" );
	${0}
# log warning message
snippet lw log warning message
	$log->warning( "${1:message}" );
	${0}
# abort program
snippet la abort program
	$log->abort( "${1:message}" ) unless ${2:condition};
	${0}

### Miscellanious
# heredoc
snippet here heredoc
	my $${1:variable} = <<"${2:label}";
	${0}
	$2
# new hash
snippet hash new hash
	my %${1:name} = (
	  ${2:key} => ${3:value},
	);
# hash slice
snippet hslice hash slice
	@{ ${1:hash}  }{ ${0:array} }
# eval block
snippet eval eval block
	local $@;
	eval {
		${1:# do something risky...}
	};
	if (my $e = $@) {
		${0:# handle failure...}
	}
